const float size = 0.1;

float2 coordinates[] = {
    float2(-size, -size),
    float2(size, -size),
    float2(size, size),

    float2(-size, -size),
    float2(size, size),
    float2(-size, size)
};

float2 uvs[] = {
    float2(0, 0),
    float2(1, 0),
    float2(1, 1),

    float2(0, 0),
    float2(1, 1),
    float2(0, 1)
};

layout(set = 0, binding = 0) uniform UniformBufferObject {
    float4x4 viewProj;
    float2 debugPoint;
} ubo;

VertexShader()
{
    gl_Position = float4(coordinates[gl_VertexIndex] + ubo.debugPoint, 0, 1);
    UVs = uvs[gl_VertexIndex];
}

layout(location = 0) out float4 outColour;
layout(location = 1) out float4 outNormal;
layout(location = 2) out float4 outPosition;
layout(location = 3) out float4 outGI;

layout(set = 0, binding = 1) uniform sampler2D samplerTex;

PixelShader(float2 UVs)
{
    float4 col = texture(samplerTex, UVs);
    if (col.a < 0.5) discard;

    outColour = col;
    outGI = float4(1);
}