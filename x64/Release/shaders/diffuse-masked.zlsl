#VertexShader "staticVert.zlsl"

layout(location = 0) out float4 outColor;
layout(location = 1) out float4 outNormal;
layout(location = 2) out float4 outPosition;
layout(location = 3) out float4 outGI;

layout(set = 0, binding = 1) uniform sampler2D aoSampler;

layout(set = 2, binding = 0) uniform sampler2D texSampler;
layout(set = 2, binding = 1) uniform sampler2D rghSampler;
layout(set = 2, binding = 2) uniform sampler2D nrmSampler;
layout(set = 2, binding = 3) uniform samplerCUBE cubeSampler;


#include "lights.glsl"

PixelShader(float3 nrm, float2 UVs, float2 lightmapUV, float3 pos, float3 tangent, float3 camPos)
{
	float4 col = texture(texSampler, UVs);
	if (col.a < 0.2) discard;

	outPosition = float4(pos, distance(pos, camPos));
	float3 normal = (texture(nrmSampler, UVs).rgb - 0.5) * 2.0;

	float3 binormal = cross(nrm, tangent);
	float3 worldNormal = TangentToWorld(tangent, binormal, nrm, normal);

	float3 view = normalize(pos - camPos);
	float3 reflectionVector = reflect(view, worldNormal);

	float rgh = texture(rghSampler, UVs).r;

	outNormal = float4(worldNormal, rgh);

	float3 reflection = CubeLod(cubeSampler, reflectionVector, rgh).rgb;

	reflection = Desaturate(reflection, 0.4f) * Fresnel(worldNormal, view, 1.0f) * 0.6f;

	outGI = texture(aoSampler, lightmapUV);
	outColor = float4(col.rgb + reflection, 1.0f);
}