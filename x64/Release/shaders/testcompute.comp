#version 450

#include "zutils.glsl"

layout (local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0) uniform Config{
	float4x4 viewProj;
	float4x4 view;
	float4 camDir;
	float4 camPos;
	uint numIndices;
	uint numVertices;
    uint numObjects;
	uint width;
	uint height;
} opData;

struct Vertex
{
    float3 pos;
    float3 nrm;
    float3 tangent;
    float4 uvs;
};

layout(set = 0, binding = 1) readonly buffer VertexArray{
    Vertex data[];
} vertices;

layout(set = 0, binding = 2) readonly buffer IndexArray{
    uint data[];
} indices;

struct Object
{
    float4x4 mat;
    uint startingIndex;
    uint numIndices;
    uint startingVertex;
};

layout(set = 0, binding = 3) readonly buffer ObjectArray{
    Object data[];
} objects;

layout(set = 0, binding = 4) uniform sampler2D samplerPos;
layout(set = 0, binding = 5) uniform sampler2D samplerNrm;

layout(set = 0, binding = 6, rgba8) uniform writeonly image2D outImage;

const float randomFloats[255] = { 0.289461158664417, 0.9273989913348076, 0.5754506130150805, 0.3017136635295701, 0.48958020547285175, 0.8295945223188455, 0.4650631212102242, 0.541617417349968, 0.8360650428368968, 0.8307989942872112, 0.36413542478110805, 0.8526555510789575, 0.359741256282475, 0.1851684995693189, 0.22844539816221565, 0.8393084368059561, 0.47240803880999016, 0.8019635431044827, 0.21259079477823928, 0.45246231707639395, 0.10063056837994122, 0.10868067714427165, 0.31557737786043516, 0.6106600137650581, 0.9788901774457908, 0.46208546312375076, 0.1817320485559426, 0.758709466330972, 0.6352704757871648, 0.48180594742487626, 0.9137781693823436, 0.9862493469503846, 0.2675865956619248, 0.6623829268144659, 0.6291860925119837, 0.502224483246513, 0.25563020591094054, 0.5149238184186231, 0.2680041590130432, 0.6618687281169172, 0.7517214752710767, 0.6186675849002368, 0.21462241999614595, 0.9260581969236187, 0.7036221026837307, 0.11412499698728262, 0.778705722203294, 0.8481536324039193, 0.9611674440981303, 0.20972750175476784, 0.3184018591297886, 0.12192196248697185, 0.3124422843606661, 0.040576167645957395, 0.4660203713130202, 0.7644521670106319, 0.08463587227774538, 0.2743844749657973, 0.6530357744793363, 0.4779823081553384, 0.23164133986958446, 0.5738575912630532, 0.9800334605819193, 0.012059895172714108, 0.6188455215492815, 0.5144215171142381, 0.25715562664392455, 0.5611893634031679, 0.2616237045663724, 0.9898327847884593, 0.7373713447535439, 0.47886712267363285, 0.7120497515406902, 0.33314683016038127, 0.23177853221634714, 0.04341577066535496, 0.2722434921181621, 0.5889106740791978, 0.32671548778157955, 0.7288462399879915, 0.642499178696914, 0.25125802570568834, 0.48018337534453626, 0.7715125721212761, 0.3174273224657136, 0.2766331015713225, 0.5697053014115373, 0.7594020045022297, 0.9349171421286673, 0.009066580304507021, 0.10214387802067637, 0.291035288774686, 0.5174320339131339, 0.873881730499826, 0.5124199591294727, 0.535596569897334, 0.8558087830519822, 0.9366115808571125, 0.020195036806549882, 0.6433645174445508, 0.40427839537673826, 0.699895636771509, 0.04780315695977799, 0.7927306973281368, 0.5207240587510569, 0.1154827457626425, 0.3216825270639474, 0.8753786854636055, 0.5209847419983247, 0.1487131972137159, 0.34908457896401546, 0.5569026277133177, 0.29610706017011945, 0.07724358108051177, 0.018077341495661203, 0.7891384532142804, 0.1264975558724185, 0.870918522078709, 0.5727788569673649, 0.7700383228536575, 0.5387489735484207, 0.29864500980216313, 0.9571492820305922, 0.7892597348449694, 0.8825552528536069, 0.4796759582644782, 0.757936578312142, 0.36157671855344886, 0.5713854456545313, 0.2911087426510104, 0.6067609079513799, 0.07647449032453957, 0.5862421845302953, 0.8099175900524944, 0.9996362031293925, 0.8109043062174365, 0.07149812395230049, 0.40507836717293577, 0.28403415273423505, 0.41549182969918674, 0.8422755418481868, 0.1432078417983026, 0.5087837374100913, 0.5527230628274697, 0.2522481163202476, 0.7571150515182598, 0.8330534635531396, 0.8367816066776653, 0.21600470030894625, 0.9450088837763535, 0.3930687590204168, 0.5361114648235161, 0.7989659728426959, 0.27716043026188797, 0.586977377121376, 0.03089071952028255, 0.6388185003444923, 0.14798158806015727, 0.9112057359095154, 0.027728242706928308, 0.21332009094745708, 0.2870655219406034, 0.7332038616512312, 0.34009901593674874, 0.6796553925212522, 0.38406626585222026, 0.27400180327496104, 0.01892321286980103, 0.26627077273490785, 0.05978085130869615, 0.10087409330305586, 0.7510063210539647, 0.7741287032726015, 0.1530631097565014, 0.17088693080778516, 0.7861923179111919, 0.7817653164818437, 0.42300555101738413, 0.772333659772083, 0.1532834133463884, 0.9075925893671524, 0.6412281756530002, 0.5749857606130258, 0.9720366789409557, 0.791308806723832, 0.4265411574589887, 0.7776591730473232, 0.5978801146483487, 0.9479974467280345, 0.49226216196896766, 0.2663273486698884, 0.36417284982932396, 0.48752636162817486, 0.8693619883456324, 0.6541096621850829, 0.9203067942596012, 0.09496708321019431, 0.995023749972656, 0.40866902913050374, 0.45634216816374995, 0.2261259280106237, 0.6685324129420582, 0.3105389530475433, 0.21344852319190422, 0.5704828624000743, 0.944256656108826, 0.5636432309451409, 0.2630222671289194, 0.7140175812095648, 0.5300699293528164, 0.7870168957191559, 0.7557741078485772, 0.5637118350400749, 0.2483481976111206, 0.06210104930348903, 0.39241685956630523, 0.7988708175472271, 0.6417491721197268, 0.8372685654761981, 0.5598604208351224, 0.9434115237558676, 0.40876974779971087, 0.025640727359840576, 0.37564743113363497, 0.9663350719498371, 0.2651083886444374, 0.3790085941891326, 0.689036971285624, 0.42725674612463327, 0.10224803620355438, 0.7341181528329866, 0.22016532031742053, 0.2273791852212117, 0.7764119401503846, 0.650096409024699, 0.2964380899386283, 0.295145503779234, 0.8378438835168001, 0.7818900360956996, 0.4546401621911307, 0.5101935414227843, 0.8494675048428529, 0.9573553578429459, 0.028103804185191095, 0.888243698745797, 0.34356758731229975, 0.45044314571445676, 0.8474023295905305, 0.914912745648074, 0.5379949081088868, 0.7243349330351183, 0.933616844212637, 0.8185846716059446, 0.40149741592085153, 0.9919513163885795 };
int randomIndex = 0;

float3 RandomDir(float3 normal)
{
    float3 dir;
    dir.x = randomFloats[randomIndex++];
    dir.y = randomFloats[randomIndex++];
    dir.z = randomFloats[randomIndex++];

    return (dot(normal, dir) < 0) ? -dir : dir;
}

bool RayTriangleSimple(float3 rayOrigin, float3 rayDir, Vertex p1, Vertex p2, Vertex p3, out float out_distance, out float3 out_Q)
{
    float3 BA = p2.pos - p1.pos;
    float3 CA = p3.pos - p1.pos;
    float3 normal = normalize(cross(BA, CA));

    float3 CB = normalize(p3.pos - p2.pos);
    float3 AC = normalize(p1.pos - p3.pos);

    float D = dot(rayDir, normal);

    if (D > 0)
    {
        float d = dot(normal, p1.pos);
        out_distance = (d - dot(normal, rayOrigin)) / dot(normal, rayDir);
        out_Q = rayOrigin + (rayDir * out_distance);
        float3 QA = out_Q - p1.pos;
        float3 QB = out_Q - p2.pos;
        float3 QC = out_Q - p3.pos;
        if (dot(normalize(BA * QA), normal) >= 0 && dot(normalize(CB * QB), normal) >= 0 && dot(normalize(AC * QC), normal) >= 0)
            return true;
    }

    return false;
}

bool RayObjectSimple(float3 rayOrigin, float3 rayDir, Object object, out float out_distance, out float3 out_Q)
{
    Vertex p1, p2, p3;
    uint indexIndex;

    float3 origin = (object.mat * float4(rayOrigin, 1)).xyz;
    float3 dir = (object.mat * float4(rayDir, 0)).xyz;

    for (uint j = 0; j < object.numIndices; j += 3)
    {
        indexIndex = j + object.startingIndex;

        p1 = vertices.data[indices.data[indexIndex] + object.startingVertex];
        p2 = vertices.data[indices.data[indexIndex + 1] + object.startingVertex];
        p3 = vertices.data[indices.data[indexIndex + 2] + object.startingVertex];

        if (RayTriangleSimple(rayOrigin, rayDir, p1, p2, p3, out_distance, out_Q))
            return true;
    }

    return false;
}

int samples = 8;

void main()
{
	ivec2 gID = ivec2(gl_GlobalInvocationID.xy);
    float2 UVs = float2(gID) / float2(opData.width, opData.height);

    if (gID.x > opData.width || gID.y > opData.height)
        return;

    float3 position = texture(samplerPos, UVs).xyz;
    float3 rayDir = normalize(position - opData.camPos.xyz);

    float3 rayOrigin = opData.camPos.xyz;

    float distance;
    float3 Q;
    bool hit = false;
    float closest = 9999.0f;

    for (uint i = 0; i < opData.numObjects; i++)
    {
        if (RayObjectSimple(rayOrigin, rayDir, objects.data[i], distance, Q))
        {
            hit = true;
            closest = min(closest, distance);
        }
    }

    if (hit)
        imageStore(outImage, gID, float4(closest / 5000));
    else
        imageStore(outImage, gID, float4(float3(0), 1));
}