layout(set = 0, binding = 0) uniform UniformBufferObject {
    float4x4 viewProj;
    float3 CAMERA; // position of the camera, in world space
    float time; // amount of time passed
} ubo;

layout(set = 1, binding = 0) readonly buffer MatrixArray{
    float4x4 data[];
} matrices;

layout(set = 1, binding = 1) readonly buffer ShadowMapOffsetArray{
    float4 data[];
} shadowMapOffsets;

#define WAVESCALEX 0.7
#define WAVESCALEY 0.8

#define WAVEHEIGHTX 0.1
#define WAVEHEIGHTY 0.1

#define worldMatrix (matrices.data[gl_InstanceIndex])

VertexShader(float3 inPosition, float3 inNormal, float4 inUV, float3 inTangent)
{
    nrm = normalize((worldMatrix * float4(inNormal, 0)).xyz);

    float4 worldPosition = worldMatrix * float4(inPosition, 1.0);

	//worldPosition.z += sin(ubo.time + (worldPosition.x * WAVESCALEX)) * WAVEHEIGHTX;
	//worldPosition.z += sin(ubo.time + (worldPosition.y * WAVESCALEY)) * WAVEHEIGHTY;

    gl_Position = ubo.viewProj * worldPosition;

    UVs = inUV.xy;
	tangent = normalize((worldMatrix * float4(inTangent, 0)).xyz);
    pos = worldPosition.xyz;
	camPos = ubo.CAMERA;
	timer = ubo.time;
}

layout(location = 0) out float4 outColor;
layout(location = 1) out float4 outNormal;
layout(location = 2) out float4 outPosition;
layout(location = 3) out float4 outGI;

layout(set = 0, binding = 1) uniform sampler2D aoSampler;

layout(set = 2, binding = 0) uniform sampler2D texSampler;
layout(set = 2, binding = 1) uniform sampler2D nrmSampler;
layout(set = 2, binding = 2) uniform samplerCUBE cubeSampler;

const float3 WATERCOLOUR = float3(0.75, 0.9, 1);

PixelShader(float3 nrm, float2 UVs, float3 pos, float3 camPos, float3 tangent, float timer)
{
	outPosition = float4(pos, 1000.f);
	outGI = float4(1);

	float2 TIME = float2(timer * 0.1, timer * 0.1);
	float2 TIME2 = TIME * float2(1, -1) + float2(0.1, 0.2);

	float3 normal = (texture(nrmSampler, UVs + TIME).rgb - 0.5) * 2;
	float3 normal2 = (texture(nrmSampler, UVs + TIME2).rgb - 0.5) * 2;

	normal = normalize(normal + normal2);

	float3 binormal = cross(nrm, tangent);

	float3 worldNormal = TangentToWorld(tangent, binormal, nrm * 2, normal);

	outNormal = float4(worldNormal, 0);

	float3 incident = normalize(pos - camPos);

	float fresnel = pow(1 - -dot(worldNormal, incident), 2.0);

	outColor = float4(lerp(WATERCOLOUR, float3(1), fresnel), 1);

}